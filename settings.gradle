import com.gradle.enterprise.gradleplugin.internal.extension.BuildScanExtensionWithHiddenFeatures

pluginManagement {
  plugins {
    id "com.gradle.enterprise" version "3.10.3"
    id "com.gradle.common-custom-user-data-gradle-plugin" version "1.7.2"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "net.nemerosa.versioning" version "3.0.0"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.42.0"
    id "biz.aQute.bnd.builder" version "6.3.1"
    id "org.gradle.test-retry" version "1.4.0"
  }

  includeBuild "build-logic"
}

plugins {
  id "com.gradle.enterprise"
  id "com.gradle.common-custom-user-data-gradle-plugin"
}

dependencyResolutionManagement {
  repositories {
    mavenCentral()
  }
}

if (((System.getProperty("java.specification.version") ?: 8) as BigDecimal) < 11) {
  throw new InvalidUserDataException("The spock build needs to be run with JDK 11 or higher, but was: ${System.getProperty("java.specification.version")}")
}


def gradleEnterpriseServer = "https://ge.spockframework.org"
def isCiServer = System.env["CI"] || System.env["GITHUB_ACTIONS"]
def spockBuildCacheUsername = ext.has('spockBuildCacheUsername') ? ext['spockBuildCacheUsername'] : null
def spockBuildCachePassword = ext.has('spockBuildCachePassword') ? ext['spockBuildCachePassword'] : null

def accessKeysAreMissing() {
  return !(System.env['GRADLE_ENTERPRISE_ACCESS_KEY']?.trim())
}

gradleEnterprise {
  buildScan {
    captureTaskInputFiles = true
    uploadInBackground = !isCiServer


    if (gradle.startParameter.buildScan || (isCiServer && accessKeysAreMissing())) {
      termsOfServiceUrl = "https://gradle.com/terms-of-service"
    } else {
      server = gradleEnterpriseServer
      publishAlways()
      (delegate as BuildScanExtensionWithHiddenFeatures).publishIfAuthenticated()
    }

    if (isCiServer) {
      publishAlways()
      termsOfServiceAgree = "yes"
    }

    obfuscation {
      if (isCiServer) {
        username { "github" }
      } else {
        hostname { null }
        ipAddresses { [] }
      }
    }
  }
}

buildCache {
  local {
    enabled = !isCiServer
  }
  remote(HttpBuildCache) {
    url = uri("$gradleEnterpriseServer/cache/")
    push = isCiServer && spockBuildCacheUsername && spockBuildCachePassword
    credentials {
      username = spockBuildCacheUsername ?: null
      password = spockBuildCachePassword ?: null
    }
  }
}

includeBuild "build-logic"
include "spock-bom"
include "spock-core"
include "spock-specs"
include "spock-specs:mock-integration"
include "spock-spring"
include "spock-guice"
include "spock-junit4"
include "spock-testkit"

if ((System.getProperty("variant") as BigDecimal ?: 2.5) == 2.5) {
  //Remove once Groovy 2.5 support is dropped
  include "spock-groovy2-compat"
}

// https://issues.apache.org/jira/projects/TAP5/issues/TAP5-2588
if (((System.getProperty("javaVersion") ?: 8) as int) == 8) {
  include "spock-tapestry"
}

include "spock-unitils"

include "spock-spring:boot2-test"
include "spock-spring:spring3-test"
include "spock-spring:spring5-test"
if (((System.getProperty("javaVersion") ?: 8) as int) >= 17) {
  include "spock-spring:spring6-test"
}

rootProject.name = "spock"
nameBuildScriptsAfterProjectNames(rootProject.children)

def nameBuildScriptsAfterProjectNames(projects) {
  for (prj in projects) {
    prj.buildFileName = prj.name + ".gradle" - "spock-"
    nameBuildScriptsAfterProjectNames(prj.children)
  }
}
