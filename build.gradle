import java.text.SimpleDateFormat

plugins {
  id 'com.gradle.build-scan' version '2.2.1'
  id "base"
  id "org.asciidoctor.convert" version "1.6.0"
  id "jacoco"
  id "net.nemerosa.versioning" version "2.8.2"
  id "de.marcphilipp.nexus-publish" version "0.3.1" apply false
//  id "com.github.ben-manes.versions" version "0.21.0"
}

description = "Spock Framework"

ext {
  baseVersion = "2.0"
  snapshotVersion = true
  milestone = 0
  variants = [2.5, 3.0]
  variant = System.getProperty("variant") as BigDecimal ?: variants.first()
  if (variant == 2.5) {
      groovyVersion = "2.5.8"
      minGroovyVersion = "2.5.0"
      maxGroovyVersion = "2.9.99"
    } else if (variant == 3.0) {
      groovyVersion = "3.0.0"
      minGroovyVersion = "3.0.0"
      maxGroovyVersion = "3.9.99"
    } else {
    throw new InvalidUserDataException("Unknown variant: $variant. Choose one of: $variants")
  }

  groovyDependency = [
    "org.codehaus.groovy:groovy:${groovyVersion}",
    "org.codehaus.groovy:groovy-json:${groovyVersion}",
    "org.codehaus.groovy:groovy-nio:${groovyVersion}",
    "org.codehaus.groovy:groovy-macro:${groovyVersion}",
    "org.codehaus.groovy:groovy-templates:${groovyVersion}",
    "org.codehaus.groovy:groovy-test:${groovyVersion}",
    "org.codehaus.groovy:groovy-sql:${groovyVersion}",
    "org.codehaus.groovy:groovy-xml:${groovyVersion}",
  ]
  groovyConsoleExtraDependency = [
    "org.codehaus.groovy:groovy-console:${groovyVersion}"
  ]
  maxGroovyVersion = snapshotVersion ? "3.9.99" : maxGroovyVersion
  if (System.getProperty("groovyVersion")) {
    groovyVersion = System.getProperty("groovyVersion")
  }
  fullVersion = baseVersion + ((!snapshotVersion && milestone) ? "-M$milestone" : "") + "-groovy-$variant" + (snapshotVersion ? "-SNAPSHOT" : '')
  variantLessVersion = baseVersion + (snapshotVersion ? "-SNAPSHOT" : (milestone ? "-M$milestone" : ""))
  javaVersions = [1.8, 11] // ensure that latest version is actually build on travis, otherwise no docs get published
  javaVersion = System.getProperty("java.specification.version") as BigDecimal

  if (javaVersion >= 9) {
    groovyDependency += ["javax.xml.bind:jaxb-api:2.3.0"]
  }

  libs = [
    jetbrainsAnnotations: "org.jetbrains:annotations:13.0",
    ant: "org.apache.ant:ant:1.10.5",
    asm: "org.ow2.asm:asm:7.1",
    bytebuddy: "net.bytebuddy:byte-buddy:1.9.11",
    cglib: "cglib:cglib-nodep:3.2.10",
    groovy: groovyDependency,
    h2database: "com.h2database:h2:1.3.176",
    junit4: "junit:junit:4.12",
    junitBom: "org.junit:junit-bom:5.5.2",
    jupiter: "org.junit.jupiter:junit-jupiter",
    junitPlatform: "org.junit.platform:junit-platform-engine",
    junitPlatformTestkit: "org.junit.platform:junit-platform-testkit",
    junitPlatformConsole: "org.junit.platform:junit-platform-console",
    log4j: "log4j:log4j:1.2.17",
    objenesis: "org.objenesis:objenesis:3.0.1"
  ]
  Date buildTimeAndDate = new Date()
  buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
  buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

allprojects {
  ext.displayName = null

  group = "org.spockframework"
  version = fullVersion

  apply from: script("common")

  if (javaVersion == 1.8) {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
      options.noTimestamp()
    }
  } else if (javaVersion >= 9){
    tasks.withType(JavaCompile) {
      sourceCompatibility = javaVersions.min()
      targetCompatibility = javaVersions.min()
      options.compilerArgs += ['--release', '8']
      options.encoding = 'UTF-8'
    }
    tasks.withType(GroovyCompile) {
      sourceCompatibility = javaVersions.min()
      targetCompatibility = javaVersions.min()
      options.compilerArgs += ['--release', '8']
      options.encoding = 'UTF-8'
    }

    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
      options.noTimestamp()
    }
  }
}

apply from: script("ide")

subprojects {
  apply plugin: "groovy"
  apply plugin: "jacoco"

  sourceCompatibility = javaVersions.min()
  targetCompatibility = javaVersions.min()

  sourceSets.all { ss ->
    for (v in variants.findAll { it <= variant } ) {
      java {
        srcDir "src/${ss.name}$v/java"
      }
      groovy {
        srcDir "src/${ss.name}$v/groovy"
      }
    }
  }

  sourceSets.all { ss ->
    for (jv in javaVersions.findAll { it <= javaVersion } ) {
      java {
        srcDir "src/${ss.name}.java$jv/java"
      }
      groovy {
        srcDir "src/${ss.name}.java$jv/groovy"
      }
    }
  }

  repositories {
    mavenCentral()
    maven {
      url 'https://jitpack.io'
      content {
        includeGroup "com.github.junit-team.junit5"
      }
    }
  }

  configurations {
    all*.exclude module: "junit-dep"
  }

  dependencies {
    compile(platform(libs.junitBom))
    compile(project.name == "spock-gradle" ? [] : libs.groovy)
  }

  configureJavadoc(javadoc)
  configureGroovydoc(groovydoc)

  task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
  }

  tasks.withType(Test) {
    useJUnitPlatform()
    def taskName = name
    reports {
      junitXml {
        destination = file("$destination/$taskName-$variant")
      }
      html {
        destination = file("$destination/$taskName-$variant")
      }
    }
    //Required for building on Travis' container-based infrastructure to not be killed with
    //'exit code 137' - https://github.com/travis-ci/travis-ci/issues/5582
    jvmArgs '-Xmx512m'

    //Workaround on https://github.com/junit-team/junit5/issues/1909 - to be removed once switched to junit 5.6
    afterSuite { desc, result ->
      if (!desc.parent) {
        if (result.testCount == 0) {
          throw new IllegalStateException("No tests were found. Failing the build")
        }
      }
    }
  }

  jacoco {
    toolVersion = '0.8.2'
  }
}

task collectTestXml (group: 'Test reports') {
  description = "Collects the test xmls from every subproject into a new directory with subproject as name."
  def reportingProjects = subprojects.findAll()
  dependsOn(reportingProjects.tasks.collectMany{it.withType(Test)})


  doFirst {
    def target = file("$buildDir/collected-test-results")
    target.mkdirs()
    reportingProjects.each { rp ->
      rp.tasks.withType(Test).each { testTask ->
        def repSrc = testTask.reports.junitXml.destination

        def repTarget = file("$target/$rp.name-$repSrc.name")
        copy {
          from repSrc
          into repTarget
          include '**/*.xml'
        }
      }
    }
  }
}


task codeCoverageReport (type: JacocoReport, group: 'Coverage reports') {
  description = "Creates an aggregate coverage for the whole project."
  def reportingProjects = subprojects
  dependsOn(reportingProjects.tasks.collectMany { it.withType(Test) })

  additionalSourceDirs.from(reportingProjects.sourceSets.main.allSource.srcDirs)
  additionalClassDirs.from(reportingProjects.sourceSets.main.output)
  executionData.from(files(reportingProjects.jacocoTestReport.executionData).filter { it.exists() })

  reports {
    html.enabled = true
    xml.enabled = true
    xml.destination file("${buildDir}/reports/jacoco/report.xml") // report must be here for codecov to pick it up
    csv.enabled = false
  }
}

if (gradle.startParameter.taskNames == ["travisCiBuild"]) {
  gradle.startParameter.taskNames = ["build", "codeCoverageReport"]
  subprojects {
    tasks.withType(Test) {
      maxParallelForks = 2
    }
  }
  if (System.getenv("TRAVIS_PULL_REQUEST") == "false" && System.getenv("TRAVIS_BRANCH") == "master") {
    if (javaVersion == javaVersions.min()) {
      gradle.startParameter.taskNames += ["publish"]
      if (!snapshotVersion) {
        gradle.startParameter.taskNames += ["tagRelease"]
      }
    }
    if (javaVersion == javaVersions.max()) {
      if (variant == variants.max()) {
        gradle.startParameter.taskNames += ["publishJavadoc", "publishDocs"]
      }
    }
  }
}

if (gradle.startParameter.taskNames == ["shippableCiBuild"]) {
  gradle.startParameter.taskNames = ["clean", "build"] // use clean because whole minion is cached
  task aggregateTestResults(type: Sync) {
    from { subprojects.test.reports.junitXml.destination }
    into "shippable/testresults"
    include "**/TEST-*.xml"
  }
  subprojects {
    tasks.withType(Test) {
      it.finalizedBy(aggregateTestResults)
    }
  }
}

if (gradle.startParameter.taskNames == ["appveyorCiBuild"]) {
  gradle.startParameter.taskNames = ["build"]
}

if (gradle.startParameter.taskNames == ["circleCiBuild"]) {
  gradle.startParameter.taskNames = ["build", "collectTestXml"]
}

task publishJavadoc(type: Exec) {
  dependsOn "javadoc"
  commandLine "sh", "-c",
"""
  git config user.email "dev@forum.spockframework.org"
  git config user.name "Spock Framework Robot"
  git fetch origin +gh-pages:gh-pages
  git checkout gh-pages
  rm -rf javadoc/$variantLessVersion
  mkdir -p javadoc/$variantLessVersion
  cp -r build/javadoc/$variantLessVersion javadoc/
  git add javadoc
  git commit -qm "Publish javadoc/$variantLessVersion"
  git push "https://\$GITHUB_TOKEN@github.com/spockframework/spock.git" gh-pages 2>&1 | sed "s/\$GITHUB_TOKEN/xxx/g"
  git checkout master
"""
}
task publishDocs(type: Exec) {
  dependsOn "asciidoctor"
  commandLine "sh", "-c",
"""
  git config user.email "dev@forum.spockframework.org"
  git config user.name "Spock Framework Robot"
  git fetch origin +gh-pages:gh-pages
  git checkout gh-pages
  rm -rf docs/$variantLessVersion
  mkdir -p docs/$variantLessVersion
  cp -r build/asciidoc/html5/* docs/$variantLessVersion
  git add docs
  git commit -qm "Publish docs/$variantLessVersion"
  git push "https://\$GITHUB_TOKEN@github.com/spockframework/spock.git" gh-pages 2>&1 | sed "s/\$GITHUB_TOKEN/xxx/g"
  git checkout master
"""
}
task tagRelease(type: Exec) {
  commandLine "sh", "-c",
"""
  git config user.email "dev@forum.spockframework.org"
  git config user.name "Spock Framework Robot"
  git checkout master
  git tag -f spock-$variantLessVersion
  git push "https://\$GITHUB_TOKEN@github.com/spockframework/spock.git" spock-$variantLessVersion 2>&1 | sed "s/\$GITHUB_TOKEN/xxx/g"
"""
}

task javadoc(type: Javadoc) {
  title "Spock Framework API Documentation ($variantLessVersion)"
  destinationDir file("build/javadoc/$variantLessVersion")
  source subprojects.javadoc.source
  classpath = files(subprojects.javadoc.classpath)
}

configureJavadoc(javadoc)

task groovydoc(type: Groovydoc) {
  docTitle "Spock Framework API Documentation ($variantLessVersion)"
  windowTitle "Spock Framework API Documentation ($variantLessVersion)"
  destinationDir file("build/groovydoc/$variantLessVersion")
  source subprojects.groovydoc.source
  classpath = files(subprojects.groovydoc.classpath)
  groovyClasspath = project(":spock-core").groovydoc.groovyClasspath
}

configureGroovydoc(groovydoc)

asciidoctor {
  sourceDir = file("docs")
  logDocuments = true
  attributes "source-highlighter": "coderay", "linkcss": true, "sectanchors": true, "revnumber": variantLessVersion
  // also treats the included specs as inputs
  inputs.dir file("spock-specs/src/test/groovy/org/spockframework/docs")
  inputs.dir file("spock-spring/src/test/groovy/org/spockframework/spring/docs")
  inputs.dir file("spock-spring/src/test/resources/org/spockframework/spring/docs")
  inputs.dir file("spock-spring/boot-test/src/test/groovy/org/spockframework/boot")
  inputs.dir file("spock-spring/boot2-test/src/test/groovy/org/spockframework/boot2")
  inputs.dir file("spock-spring/spring3-test/src/test/groovy/org/spockframework/spring3")
  inputs.dir file("spock-spring/spring5-test/src/test/groovy/org/spockframework/spring5")
}

File script(String name) {
  project.file("gradle/${name}.gradle")
}

def configureJavadoc(task) {
  configure(task) {
    include "spock/**"
    configure(options) {
      options.addStringOption('source', '1.8')
      links "http://docs.oracle.com/javase/8/docs/api/"
      links "http://docs.groovy-lang.org/docs/groovy-$groovyVersion/html/gapi/"
      links "http://junit.org/junit4/javadoc/latest/"
      links "http://hamcrest.org/JavaHamcrest/javadoc/1.3/"
    }
  }
}

def configureGroovydoc(task) {
  configure(task) {
    include "spock/**"
  }
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

subprojects {
    task allDependencyInsight(type: DependencyInsightReportTask) {}
}
