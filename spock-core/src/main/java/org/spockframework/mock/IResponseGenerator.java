/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     https://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.spockframework.mock;

import org.spockframework.util.Beta;
import org.spockframework.util.Nullable;

import java.util.function.Supplier;

/**
 * Generates responses to mock invocations.
 */
@Beta
public interface IResponseGenerator {
  /**
   * Do not call this method from Spock 2.4 on! Some implementations of this interface have the need to overwrite
   * {@link #getResponseSupplier(IMockInvocation)} instead and throw an exception if this method is called directly.
   * Always use {@code getResponseSupplier} instead to retrieve a response from this response generator.
   *
   * <p>If you implement this interface and can directly provide the generated response, you can overwrite this
   * method and use the default implementation of {@code getResponseSupplier} which uses this method. If you are in
   * need to manage some state, like advancing an iterator or similar, or the actual supplying can deadlock,
   * or you might throw an exception, you might want to implement {@code getResponseSupplier} instead and keep
   * the default implementation of this method which throws an {@code UnsupportedOperationException}.
   *
   * <p>This method is mainly kept for backwards compatibility with code that implements this interface.
   * Most usages where this method is called will most likely fail to execute now.
   *
   * @param invocation The invocation to generate a response for
   * @return The generated response
   * @throws UnsupportedOperationException if {@code getResponseSupplier} must be used instead
   * @deprecated Use {@link #getResponseSupplier(IMockInvocation)} instead
   */
  @Nullable
  @Deprecated
  default Object respond(IMockInvocation invocation) {
    throw new UnsupportedOperationException("Call getResponseSupplier(invocation) instead");
  }

  /**
   * This method should be used from Spock 2.4 on, to get a response generated by this response generator.
   * Calling {@link #respond(IMockInvocation)} directly might throw an {@code UnsupportedOperationException}, if
   * this response generator needs to do some state maintenance or other things in this method's implementation.
   *
   * <p>If you implement this interface and can directly provide the generated response, you can overwrite
   * {@code respond} and use the default implementation of this method which uses that method. If you are in
   * need to manage some state, like advancing an iterator or similar, or the actual supplying can deadlock,
   * or you might throw an exception, you might want to implement this method instead and keep the default
   * implementation of {@code respond} which throws an {@code UnsupportedOperationException}.
   *
   * @param invocation The invocation to generate a response for
   * @return A supplier that provides the generated response
   */
  default Supplier<Object> getResponseSupplier(IMockInvocation invocation) {
    return () -> respond(invocation);
  }
}
