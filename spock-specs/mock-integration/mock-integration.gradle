ext.displayName = "Spock Framework - Integration Specs for Mocking"

description = "Integration Specs for Mocking"

configurations {
  cglib
  bytebuddy
  objenesis
  mockito4
  mockito5
}

dependencies {
  testImplementation(projects.spockCore) {
    exclude group: "cglib"
    exclude group: "net.bytebuddy"
    exclude group: "org.objenesis"
    exclude group: "org.mockito"
  }
  cglib libs.cglib
  bytebuddy libs.bytebuddy
  objenesis libs.objenesis
  mockito4 libs.mockito4
  mockito5 libs.mockito5
}

def codeGenerationLibraries = [
  cglib: configurations.cglib,
  ByteBuddy: configurations.bytebuddy,
  mockito4 : configurations.mockito4
]

def javaVersion = rootProject.javaVersion

if (javaVersion >= 11) {
  //Mockito 5 requires at least Java 11 to run
  codeGenerationLibraries.put("mockito5", configurations.mockito5)
}

def configureTaskFilters = { String key, Test t ->
  if (key == "cglib") {
    if (javaVersion >= 17) {
      t.jvmArgs(
        //cglib requires access to java.lang.ClassLoader.defineClass() from net.sf.cglib.core.ReflectUtils
        "--add-opens=java.base/java.lang=ALL-UNNAMED"
      )

      //Cglib does not support Java 21 anymore
      t.onlyIf { javaVersion < 21 }
    }
  } else if (key == "mockito4") {
    //Mockito 4 or to be more specific the old byte-buddy version used by mockito 4 does not support Java 21
    t.onlyIf { javaVersion < 21 }
  }
}

codeGenerationLibraries.each { key, config ->
  tasks.register("test${key.capitalize()}WithoutObjenesis", Test) {
    systemProperty("org.spockframework.mock.testType", "${key.toLowerCase()} - objenesis")
    classpath += config

    configureTaskFilters(key, it)
  }

  tasks.register("test${key.capitalize()}WithObjenesis", Test) {
    systemProperty("org.spockframework.mock.testType", "${key.toLowerCase()} + objenesis")
    classpath += config
    classpath += configurations.objenesis

    configureTaskFilters(key, it)
  }
}

tasks.named("check") { dependsOn(tasks.withType(Test)) }
