apply plugin: 'osgi'
apply from: script("publishMaven")

ext.displayName = "Spock Framework - Core Module"

description = '''Spock is a testing and specification framework for Java and Groovy applications.
What makes it stand out from the crowd is its beautiful and highly expressive specification language.
Thanks to its JUnit runner, Spock is compatible with most IDEs, build tools, and continuous integration servers.
Spock is inspired from JUnit, jMock, RSpec, Groovy, Scala, Vulcans, and other fascinating life forms.'''

configurations { coreConsoleRuntime }

dependencies {
  compile libs.groovy // easiest way to add Groovy dependency to POM
  compile libs.junitPlatform
  compile libs.junitPlatformTestkit, optional
  compileOnly libs.junit4

  compile libs.jetbrainsAnnotations, optional
  compile libs.ant, optional
  compile libs.asm, optional
  compile libs.bytebuddy, optional
  compile libs.cglib, optional
  compile libs.objenesis, optional

  if (variant == 2.5) {
    dependencies {
      compile project(':spock-groovy2-compat')
    }
  }

  coreConsoleRuntime groovyConsoleExtraDependencies
}


jar {
  manifest {
    name = 'spock-core'
    attributes(
      'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
      'Build-Date': buildDate,
      'Build-Time': buildTime,
      'Build-Revision': versioning.info.commit,
      'Specification-Title': project.name,
      'Specification-Version': baseVersion,
      'Specification-Vendor': 'spockframework.org',
      'Implementation-Title': project.name,
      'Implementation-Version': variantLessVersion,
      'Implementation-Vendor': 'spockframework.org',
      'Automatic-Module-Name': 'org.spockframework.core'
    )
    instruction 'Export-Package', 'org.spockframework.*', 'spock.*'
    instruction 'Embed-Dependency', 'groovy;inline=false', 'junit;inline=false'
    instruction 'Import-Package',
        'groovy.*;version="[2.4,4)"',
        'org.codehaus.groovy.*;version="[2.4,4)"',
        'org.junit.*;version="[4,6)"',
        'org.hamcrest.*;version="[1,2)";resolution:=optional',
        'org.objenesis.*;version="[2,3)";resolution:=optional',
        'org.apache.tools.ant.*;version="[1.7,2)";resolution:=optional',
        'net.bytebuddy.*;version="[1.9,2)";resolution:=optional',
        'net.sf.cglib.*;version="[3.2,4)";resolution:=optional',
        'org.objectweb.asm.*;version="[5.2,6)";resolution:=optional',
        'org.w3c.dom.*'
  }
}

processResources {
  def tokens = [version: version.toString(), minGroovyVersion: minGroovyVersion, maxGroovyVersion: maxGroovyVersion]
  inputs.property "tokens", tokens
  filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: tokens)
}

task coreConsole(type: JavaExec,
                 description: 'Start a groovy Console with Spock Core Classpath, usefull for AST-Inspection') {
  main = variant == 2.5 ? "groovy.ui.Console" : "groovy.console.ui.Console"
  classpath = sourceSets.main.runtimeClasspath + configurations.coreConsoleRuntime
  workingDir = file('build/console')
  ignoreExitValue = true
  args file('CoreConsole.groovy').absolutePath
  doFirst {
    workingDir.mkdirs()
  }
}
