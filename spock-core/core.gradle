import aQute.bnd.gradle.Resolve

plugins {
  id "biz.aQute.bnd.builder"
}

apply from: script("publishMaven")

ext.displayName = "Spock Framework - Core Module"

description = '''Spock is a testing and specification framework for Java and Groovy applications.
What makes it stand out from the crowd is its beautiful and highly expressive specification language.
Thanks to its JUnit runner, Spock is compatible with most IDEs, build tools, and continuous integration servers.
Spock is inspired from JUnit, jMock, RSpec, Groovy, Scala, Vulcans, and other fascinating life forms.'''

configurations {
  coreConsoleRuntime
  osgiVerification {
    extendsFrom configurations.compileClasspath
  }
}

dependencies {
  api groovylibs.groovy // easiest way to add Groovy dependency to POM
  api platform(libs.junit.bom)
  api 'org.junit.platform:junit-platform-engine'
  api libs.hamcrest
  if (variant == 2.5) {
    api projects.spockGroovy2Compat
  }

  compileOnly libs.jetbrains.annotations

  compileOnly libs.junit.platform.testkit
  compileOnly libs.asm
  compileOnly libs.bytebuddy
  compileOnly libs.cglib
  compileOnly libs.objenesis


  coreConsoleRuntime groovyConsoleExtraDependencies
}


tasks.named("jar", Jar) {
  manifest {
    attributes(
      'Build-Revision': versioning.info.commit,
      'Specification-Title': project.name,
      'Specification-Version': baseVersion,
      'Specification-Vendor': 'spockframework.org',
      'Implementation-Title': project.name,
      'Implementation-Version': variantLessVersion,
      'Implementation-Vendor': 'spockframework.org',
      'Automatic-Module-Name': 'org.spockframework.core'
    )
  }
  bundle {
    bnd(
      'Export-Package': ['org.spockframework.*', 'spock.*'].join(','),
      'Import-Package': [
        'org.junit.platform.testkit.*;resolution:=optional',
        'org.hamcrest.*;resolution:=optional',
        'org.objenesis.*;resolution:=optional',
        'net.bytebuddy.*;resolution:=optional',
        'net.sf.cglib.*;resolution:=optional',
        'org.objectweb.asm.*;resolution:=optional',
        '*'
      ].join(','),
      '-noclassforname': 'true',
      '-noextraheaders': 'true',
      '-removeheaders': 'Private-Package',
      /*
       * Ensure the bundle can be built in a reproducible manner, This shall prevent build cache misses, when different variants are tested.
       * https://bnd.bndtools.org/instructions/reproducible.html
       */
      '-reproducible': 'true',
    )
  }
}

tasks.named("processResources") {
  def tokens = [version: version.toString(), minGroovyVersion: minGroovyVersion, maxGroovyVersion: maxGroovyVersion]
  inputs.property "tokens", tokens
  filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: tokens)
}

tasks.register("coreConsole", JavaExec) {
  description = 'Start a groovy Console with Spock Core Classpath, useful for AST-Inspection'
  main = variant == 2.5 ? "groovy.ui.Console" : "groovy.console.ui.Console"
  classpath(sourceSets.named("main").map {it.runtimeClasspath }, configurations.named("coreConsoleRuntime"))
  workingDir = file('build/console')
  ignoreExitValue = true
  args file('CoreConsole.groovy').absolutePath
  doFirst {
    workingDir.mkdirs()
  }
}

// Bnd's Resolve task uses a properties file for its configuration. This
// task writes out the properties necessary for it to verify the OSGi
// metadata.
def osgiProperties = tasks.register('osgiProperties', WriteProperties) {
  outputFile = layout.getBuildDirectory().file("verifyOSGiProperties.bndrun")
  property('-standalone', true)
  property('-runee', "JavaSE-${javaVersion < 9 ? '1.' + javaVersion : javaVersion}")
  property('-runrequires', "osgi.identity;filter:='(osgi.identity=${project.name})'")
}

// Bnd's Resolve task is what verifies that a jar can be used in OSGi and
// that its metadata is valid. If the metadata is invalid this task will
// fail.
def verifyOSGi = tasks.register('verifyOSGi', Resolve) {
  getBndrun().fileProvider(osgiProperties.map { it.outputFile })
  getOutputBndrun().set(layout.getBuildDirectory().file("resolvedOSGiProperties.bndrun"))
  reportOptional = false
  // By default bnd will use jars found in:
  // 1. project.sourceSets.main.runtimeClasspath
  // 2. project.configurations.archives.artifacts.files
  // to validate the metadata.
  // This adds jars defined in `osgiVerification` also so that bnd
  // can use them to validate the metadata without causing those to
  // end up in the dependencies of those projects.
  bundles(configurations.osgiVerification)
}

tasks.named('check') {
  dependsOn(verifyOSGi)
}
